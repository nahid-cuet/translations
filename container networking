কন্টেইনার নেটওয়ার্কিং

কন্টেইনার নেটওয়ার্কিং যতটা কঠিন মনে হয় তত কঠিন না । আমরা আজকে ট্রাই করব সিম্পল ভাবে কন্টেইনার নেটওয়ার্কিং বুঝতে । 

কন্টেইনার হচ্ছে কিছু রেস্ট্রিক্টেড এবং আইসোলেটেড লিনাক্স প্রসেস । আমরা দেখব সিঙ্গেল হোস্ট কন্টেইনার এর ক্ষেত্রে কিভাবে নেটওয়ার্ককে আইসোলেট করা যায় এবং কমিউনিকেশন করা যায় । 

আমরা লিনাক্স ডিস্ট্রো হিসেবে  vagrant centos 8 ইউজ করছি । 

Virtual Ethernet device (veth)

লিনাক্সে network stack বলতে বুঝায় নেটওয়ার্ক ডিভাইস, রাউটিং, আইপি টেবিল প্রটোকল এসবের সমষ্টি । 
লিনাক্সে root namespace 

আমরা নিচের কমান্ডে একটা কন্টেইনার তৈরী করে তার জন্য আলাদা একটা নেটওয়ার্ক স্ট্যাক তৈরী করব ।  

inspect-net-stack.sh
#!/usr/bin/env bash
echo "> Network devices"
ip link

echo -e "\n> Route table"
ip route

echo -e "\n> Iptables rules"
iptables --list-rules
আইপি টেবিলটা একটু মডিফাই করি, 
$ sudo iptables -N ROOT_NS
এর পর আমাদের আউটপুট হলো এরকম,
$ sudo ./inspect-net-stack.sh
> Network devices
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000
    link/ether 52:54:00:e3:27:77 brd ff:ff:ff:ff:ff:ff
> Route table
default via 10.0.2.2 dev eth0 proto dhcp metric 100
10.0.2.0/24 dev eth0 proto kernel scope link src 10.0.2.15 metric 100
> Iptables rules
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-N ROOT_NS

কন্টেইনারকে আইসোলেট করতে লিনাক্সে ব্যবহৃত একটি নেমস্পেস হলো নেটওয়ার্ক নেমস্পেস । নেমস্পেস লজিক্যালি একটা নেটওয়ার্ক স্ট্যাক, যার নিজস্ব রাউটিং, ফায়ারওয়াল রুলস, নেটওয়ার্ক ডিভাইস থাকবে । টপিকটা সহজ রাখার জন্য আমরা শুধু এই নেমস্পেসটা নিয়েই কাজ করব। পুরোপুরি আইসোলেটেড কন্টেইনার না তৈরী করে আমরা শুধু এই নেটওয়ার্ক স্ট্যাকের মধ্যে স্কোপটা রেস্ট্রিক্ট করে রাখব ।
নেটওয়ার্ক নেমস্পেস তৈরী করে সেই সার্ভিস চালানোর জন্য কমান্ডগুলো হলো, 
$ sudo ip netns add netns0
$ ip netns
netns0

$ sudo nsenter --net=/var/run/netns/netns0 bash
# The newly created bash process lives in netns0

$ sudo ./inspect-net-stack.sh
> Network devices
1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00

> Route table

> Iptables rules
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT

এই আউটপুট থেকে বুঝতে পারি যে সদ্য তৈরী করা এই bash প্রসেসটা একটা নতুন নেটওয়ার্ক স্ট্যাক দেখতে পাচ্ছে, এবং সেটা নিয়ে কাজ করবে । এই স্ট্যাকে কোন রাউটিং, ফায়ারওয়াল এসব কিছু নেই । শুধু একটা লুপব্যাক আইপি দেয়া আছে । 


লিনাক্স মেশিনের ভেতরে মেইন বা রুট নেমস্পেস থাকবে, তার রাউটিং, ফায়ারওয়াল/আইপি টেবিল, নেটওয়ার্ক ডিভাইস ইত্যাদি থাকবে । এখন কন্টেইনারের জন্য নতুন যে নেমস্পেসটা তৈরী করলাম সেটার স্কোপ শুধু সেই কন্টেইনারের জন্য ফিক্সড করে দিয়েছি । এখন কন্টেইনারের ভেতরের প্রসেসগুলোর কাছে সেই নেমস্পেসটাই আসল, তারা শুধু সেই নেটওয়ার্ক স্ট্যাকই চিনবে ।

এখন কন্টেইনারের সাথে কমিউনিকেশন রেডী করতে হবে । লিনাক্সের একটা সার্ভিস/টুল হলো 
Virtual Ethernet device (veth) । এটা টানেলের মত কাজ করে, 

$ sudo ip link add veth0 type veth peer name ceth0

এই কমান্ড দিয়ে আমরা এক জোড়া ভার্চুয়াল ইথারনেট ডিভাইস তৈরী করলাম, জোড়া বলছি এজন্য যে দুটো ভার্চুয়াল ডিভাইসের একটা থাকবে root namespace এ আরেকটা থাকবে কন্টেইনারের জন্য ক্রিয়েট করা নেমস্পেস এ । 
$ ip link
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000
    link/ether 52:54:00:e3:27:77 brd ff:ff:ff:ff:ff:ff
5: ceth0@veth0: <BROADCAST,MULTICAST,M-DOWN> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/ether 66:2d:24:e3:49:3f brd ff:ff:ff:ff:ff:ff
6: veth0@ceth0: <BROADCAST,MULTICAST,M-DOWN> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/ether 96:e8:de:1d:22:e0 brd ff:ff:ff:ff:ff:ff
বাই ডিফল্ট দুটো ইন্টারফেসই root namespace এ থাকবে । আমরা ceth0 ইন্টারফেসটা কন্টেইনারের নেমস্পেসে নিয়ে যাই । 

$ sudo ip link set ceth0 netns netns0

# List all the devices to make sure one of them disappeared from the root stack
$ ip link
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000
    link/ether 52:54:00:e3:27:77 brd ff:ff:ff:ff:ff:ff
6: veth0@if5: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/ether 96:e8:de:1d:22:e0 brd ff:ff:ff:ff:ff:ff link-netns netns0


আমরা ডিভাইসগুলো চালু করে আইপি এডরেস ঠিকমত বসানোর পর এই দুই ইন্টারফেস একে অপরের সাথে কমিউনিকেট করতে পারবে । 
 
রুট নেমস্পেস থেকে শুরু করি, 

$ sudo ip link set veth0 up
$ sudo ip addr add 172.18.0.11/16 dev veth0

এখন কন্টেইনার নেমস্পেস থেকে দেখি 
$ sudo nsenter --net=/var/run/netns/netns0
$ ip link set lo up  # whoops
$ ip link set ceth0 up
$ ip addr add 172.18.0.10/16 dev ceth0
$ ip link
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
5: ceth0@if6: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000
    link/ether 66:2d:24:e3:49:3f brd ff:ff:ff:ff:ff:ff link-netnsid 0
এখানে দেখতে পাই যে ceth0  থেকে রুট নেমস্পেসের veth0 এর সাথে কমিউনিকেট করতে পারছে । 
সব ঠিকঠাক মত কাজ করছে কিনা দেখে নেই ,

# From `netns0`, ping root's veth0
$ ping -c 2 172.18.0.11
PING 172.18.0.11 (172.18.0.11) 56(84) bytes of data.
64 bytes from 172.18.0.11: icmp_seq=1 ttl=64 time=0.038 ms
64 bytes from 172.18.0.11: icmp_seq=2 ttl=64 time=0.040 ms

--- 172.18.0.11 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 58ms
rtt min/avg/max/mdev = 0.038/0.039/0.040/0.001 ms

# Leave `netns0`
$ exit

# From root namespace, ping ceth0
$ ping -c 2 172.18.0.10
PING 172.18.0.10 (172.18.0.10) 56(84) bytes of data.
64 bytes from 172.18.0.10: icmp_seq=1 ttl=64 time=0.073 ms
64 bytes from 172.18.0.10: icmp_seq=2 ttl=64 time=0.046 ms

--- 172.18.0.10 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 3ms
rtt min/avg/max/mdev = 0.046/0.059/0.073/0.015 ms

এখন ceth0 থেকে অন্য কোন রাউটিং এ প্যাকেট পাঠালে সেটা যাবে না । কারণ রাউটিং দেয়া নাই । 

# Inside root namespace
$ ip addr show dev eth0
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 52:54:00:e3:27:77 brd ff:ff:ff:ff:ff:ff
    inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic noprefixroute eth0
       valid_lft 84057sec preferred_lft 84057sec
    inet6 fe80::5054:ff:fee3:2777/64 scope link
       valid_lft forever preferred_lft forever

# Remember this 10.0.2.15

$ sudo nsenter --net=/var/run/netns/netns0

# Try host's eth0
$ ping 10.0.2.15
connect: Network is unreachable

# Try something from the Internet
$ ping 8.8.8.8
connect: Network is unreachable

# From `netns0` namespace:
$ ip route
172.18.0.0/16 dev ceth0 proto kernel scope link src 172.18.0.10

আমাদের নেমস্পেসের সাবনেট মাস্ক আর আইপি থেকে রাউটিং টেবিল আপডেট হয়েছে ।  172.18.0.10/16 নেটওয়ার্কে পাঠানো প্যাকেট এখন থেকে ceth0  হয়ে যাবে । অন্য বাকী সব প্যাকেট বাতিলের খাতায় চলে যাবে । একই ভাবে রুট নেমস্পেসেও একটা রাউটিং বসবে, 

# From `root` namespace:
$ ip route
# ... omitted lines ...
172.18.0.0/16 dev veth0 proto kernel scope link src 172.18.0.11


Bridge Network

ব্রীজ নেটওয়ার্ক ব্যবহার করব একাধিক কন্টেইনারের মধ্যে কমিউনিকেশন রেডী করার জন্য । কন্টেইনারের প্রধান goal হলো রিসোর্স যেন শেয়ারড ভাবে এফিশিয়েন্ট ভাবে ব্যবহার করা যায় । একটা হোস্টে মাল্টিপল কন্টেইনার থাকলে Virtual Ethernet device (veth) দিয়ে কাজ করতে গেলে সমস্যা হবে । আমরা নতুন একটা কন্টেইনার তৈরী করি । 

# From root namespace
$ sudo ip netns add netns1
$ sudo ip link add veth1 type veth peer name ceth1
$ sudo ip link set ceth1 netns netns1
$ sudo ip link set veth1 up
$ sudo ip addr add 172.18.0.21/16 dev veth1

$ sudo nsenter --net=/var/run/netns/netns1
$ ip link set lo up
$ ip link set ceth1 up
$ ip addr add 172.18.0.20/16 dev ceth1

কানেক্টিভিটি চেক করি, 

# From `netns1` we cannot reach the root namespace!
$ ping -c 2 172.18.0.21
PING 172.18.0.21 (172.18.0.21) 56(84) bytes of data.
From 172.18.0.20 icmp_seq=1 Destination Host Unreachable
From 172.18.0.20 icmp_seq=2 Destination Host Unreachable

--- 172.18.0.21 ping statistics ---
2 packets transmitted, 0 received, +2 errors, 100% packet loss, time 55ms
pipe 2

# But there is a route!
$ ip route
172.18.0.0/16 dev ceth1 proto kernel scope link src 172.18.0.20

# Leaving `netns1`
$ exit

# From root namespace we cannot reach the `netns1`
$ ping -c 2 172.18.0.20
PING 172.18.0.20 (172.18.0.20) 56(84) bytes of data.
From 172.18.0.11 icmp_seq=1 Destination Host Unreachable
From 172.18.0.11 icmp_seq=2 Destination Host Unreachable

--- 172.18.0.20 ping statistics ---
2 packets transmitted, 0 received, +2 errors, 100% packet loss, time 23ms
pipe 2

# From `netns0` we CAN reach `veth1`
$ sudo nsenter --net=/var/run/netns/netns0
$ ping -c 2 172.18.0.21
PING 172.18.0.21 (172.18.0.21) 56(84) bytes of data.
64 bytes from 172.18.0.21: icmp_seq=1 ttl=64 time=0.037 ms
64 bytes from 172.18.0.21: icmp_seq=2 ttl=64 time=0.046 ms

--- 172.18.0.21 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 33ms
rtt min/avg/max/mdev = 0.037/0.041/0.046/0.007 ms

# But we still cannot reach `netns1`
$ ping -c 2 172.18.0.20
PING 172.18.0.20 (172.18.0.20) 56(84) bytes of data.
From 172.18.0.10 icmp_seq=1 Destination Host Unreachable
From 172.18.0.10 icmp_seq=2 Destination Host Unreachable

--- 172.18.0.20 ping statistics ---
2 packets transmitted, 0 received, +2 errors, 100% packet loss, time 63ms
pipe 2
 
দেখা যাচ্ছে যে netns1 ঠিকমত কাজ করতে পারছে না । . এটা রুট নেমস্পেসের সাথে কমিউনিকেট করতে পারছে না, একইভাবে হোস্ট থেকে আমরা এটাতে কমিউনিকেট করতে পারছি না । এর কারণ হচ্ছে কারণ রাউটিং কনফ্লিক্ট করছে । 
$ ip route
# ... omitted lines ...
172.18.0.0/16 dev veth0 proto kernel scope link src 172.18.0.11
172.18.0.0/16 dev veth1 proto kernel scope link src 172.18.0.21
 
দুটো কন্টেইনার একই নেটওয়ার্কে আছে । কিন্তু রাউটিং এর কনফ্লিক্টের কারণে যখন সেকেন্ড কন্টেইনার থেকে veth1 এ যখন কমিউনিকেট করার ট্রাই করছে তখন প্রথম রাউটিং টা সিলেক্ট হওয়ার কারণে কানেকশন ব্রেক হয়ে যাচ্ছে । আমরা প্রথম রাউট টি ডিলিট করে দিলে পুরো সিনারিও টা উল্টে যাবে, তখন netns1  ঠিক হয়ে যাবে কিন্তু netns0  ঠিকমত কাজ করবে না । এখন এটার একটা সলিউশন হলো দুটো কন্টেইনারে দুটো আলাদা নেটওয়ার্কের আইপি বসানো । 
 
বিভিন্ন সময়ে প্রয়োজন হতে পারে যে একটা হোস্টের মাল্টিপল কন্টেইনার একই নেটওয়ার্কে থাকবে । তখন আমাদের এই প্রবলেম সলভ করার জন্য় ইউজ করতে হবে Bridge Network । এটা একটা লেয়ার ২ সুইচের মত কাজ করে, সো ব্রীজ নেটওয়ার্ক তার সাথে কানেক্টেড সব ইন্টারফেসে প্যাকেট ফরোয়ার্ড করতে পারে । 
 
এখন আগের সবকিছু ডিলিট করে আবার নতুন করে দুটো কন্টেইনার তৈরী করি, এবার veth0 আর veth1 ইন্টারফেসে কোন আইপি বসানো হয় নি । 
$ sudo ip netns add netns0
$ sudo ip link add veth0 type veth peer name ceth0
$ sudo ip link set veth0 up
$ sudo ip link set ceth0 netns netns0
 
$ sudo nsenter --net=/var/run/netns/netns0
$ ip link set lo up
$ ip link set ceth0 up
$ ip addr add 172.18.0.10/16 dev ceth0
$ exit
 
$ sudo ip netns add netns1
$ sudo ip link add veth1 type veth peer name ceth1
$ sudo ip link set veth1 up
$ sudo ip link set ceth1 netns netns1
 
$ sudo nsenter --net=/var/run/netns/netns1
$ ip link set lo up
$ ip link set ceth1 up
$ ip addr add 172.18.0.20/16 dev ceth1
$ exit
 
হোস্ট মেশিনেও কোন রাউটিং দেয়া হয় নি । 
$ ip route
default via 10.0.2.2 dev eth0 proto dhcp metric 100
10.0.2.0/24 dev eth0 proto kernel scope link src 10.0.2.15 metric 100
 
এখন ব্রীজ নেটওয়ার্কটা তৈরী করলাম
$ sudo ip link add br0 type bridge
$ sudo ip link set br0 up
 
ব্রীজ নেটওয়ার্কে veth0 আর veth1 ইন্টারফেস দুটো অ্যাড করি । 
$ sudo ip link set veth0 master br0
$ sudo ip link set veth1 master br0
 
 
এবার দুটো কন্টেইনারের মধ্যে কানেক্টিভিটি চেক করি । 
$ sudo nsenter --net=/var/run/netns/netns0
$ ping -c 2 172.18.0.20
PING 172.18.0.20 (172.18.0.20) 56(84) bytes of data.
64 bytes from 172.18.0.20: icmp_seq=1 ttl=64 time=0.259 ms
64 bytes from 172.18.0.20: icmp_seq=2 ttl=64 time=0.051 ms
 
--- 172.18.0.20 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 2ms
rtt min/avg/max/mdev = 0.051/0.155/0.259/0.104 ms
 
$ sudo nsenter --net=/var/run/netns/netns1
$ ping -c 2 172.18.0.10
PING 172.18.0.10 (172.18.0.10) 56(84) bytes of data.
64 bytes from 172.18.0.10: icmp_seq=1 ttl=64 time=0.037 ms
64 bytes from 172.18.0.10: icmp_seq=2 ttl=64 time=0.089 ms
 
--- 172.18.0.10 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 36ms
rtt min/avg/max/mdev = 0.037/0.063/0.089/0.026 ms
 
দেখতে পাচ্ছি সব ঠিকমত কাজ করছে, এক্ষেত্রে আমরা veth0 and veth1 কোন আইপি বসাইনি । ceth0 আর ceth1 ইন্টারফেস দুটো কনফিগার করা হয়েছে, এরা যেহেতু একই ব্রীজ নেটওয়ার্কের সুইচের থ্রু তে একই ইথারনেট সেগমেন্টে আছে এখানে তাই লেয়াল ২ কানেক্টিভিটি আছে । 
$ sudo nsenter --net=/var/run/netns/netns0
$ ip neigh
172.18.0.20 dev ceth0 lladdr 6e:9c:ae:02:60:de STALE
$ exit
 
$ sudo nsenter --net=/var/run/netns/netns1
$ ip neigh
172.18.0.10 dev ceth1 lladdr 66:f3:8c:75:09:29 STALE
$ exit
 
 
হোস্টের সাথে কমিউনিকেশন রেডী করা 
প্রথমে দেখি কন্টেইনার আর হোস্ট মেশিন কমিউনিকেট করতে পারে কিনা 
$ sudo nsenter --net=/var/run/netns/netns0
$ ping 10.0.2.15  # eth0 address
connect: Network is unreachable

এটার কারণ হলো  netns0 ইন্টারফেস এ রাউটিং দেয়া নাই
$ ip route
172.18.0.0/16 dev ceth0 proto kernel scope link src 172.18.0.10

একই ভাবে হোস্ট নেটওয়ার্ক থেকে কন্টেইনারে কানেকশন পাওয়া যাচ্ছে না । 
# Use exit to leave `netns0` first:
$ ping -c 2 172.18.0.10
PING 172.18.0.10 (172.18.0.10) 56(84) bytes of data.
From 213.51.1.123 icmp_seq=1 Destination Net Unreachable
From 213.51.1.123 icmp_seq=2 Destination Net Unreachable

--- 172.18.0.10 ping statistics ---
2 packets transmitted, 0 received, +2 errors, 100% packet loss, time 3ms

$ ping -c 2 172.18.0.20
PING 172.18.0.20 (172.18.0.20) 56(84) bytes of data.
From 213.51.1.123 icmp_seq=1 Destination Net Unreachable
From 213.51.1.123 icmp_seq=2 Destination Net Unreachable

--- 172.18.0.20 ping statistics ---
2 packets transmitted, 0 received, +2 errors, 100% packet loss, time 3ms

হোস্ট আর কন্টেইনারের নেটওয়ার্ক কমিউনিকেট করার জন্য আমাদের ব্রীজ নেটওয়ার্ক ইন্টারফেসে আইপি বসাতে হবে । 
$ sudo ip addr add 172.18.0.1/16 dev br0

ব্রীজ ইন্টারফেসে আইপি বসানোর পর আমরা হোস্ট মেশিনের রাউটিং টেবিলে নতুন একটা এন্ট্রি পাব । 
$ ip route
# ... omitted lines ...
172.18.0.0/16 dev br0 proto kernel scope link src 172.18.0.1

$ ping -c 2 172.18.0.10
PING 172.18.0.10 (172.18.0.10) 56(84) bytes of data.
64 bytes from 172.18.0.10: icmp_seq=1 ttl=64 time=0.036 ms
64 bytes from 172.18.0.10: icmp_seq=2 ttl=64 time=0.049 ms

--- 172.18.0.10 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 11ms
rtt min/avg/max/mdev = 0.036/0.042/0.049/0.009 ms

$ ping -c 2 172.18.0.20
PING 172.18.0.20 (172.18.0.20) 56(84) bytes of data.
64 bytes from 172.18.0.20: icmp_seq=1 ttl=64 time=0.059 ms
64 bytes from 172.18.0.20: icmp_seq=2 ttl=64 time=0.056 ms

--- 172.18.0.20 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 4ms
rtt min/avg/max/mdev = 0.056/0.057/0.059/0.007 ms

কন্টেইনার থেকে এখনও হোস্টে কমিউনিকেট করা যাচ্ছে না । আমাদের eth0 ইন্টারফেসের জন্য কন্টেইনারের নেমস্পেসে ডিফল্ট রাউটিং বসাতে হবে ।
 
$ sudo nsenter --net=/var/run/netns/netns0
$ ip route add default via 172.18.0.1
$ ping -c 2 10.0.2.15
PING 10.0.2.15 (10.0.2.15) 56(84) bytes of data.
64 bytes from 10.0.2.15: icmp_seq=1 ttl=64 time=0.036 ms
64 bytes from 10.0.2.15: icmp_seq=2 ttl=64 time=0.053 ms

--- 10.0.2.15 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 14ms
rtt min/avg/max/mdev = 0.036/0.044/0.053/0.010 ms

# And repeat the change for `netns1`

এই কমান্ডের কারণে ব্রীজ ইন্টারফেসটি কন্টেইনারের জন্য ডিফল্ট গেটওয়ে হিসেবে কাজ করবে,  হোস্ট মেশিনের ইন্টারফেসটা রাউটারের মত কাজ করবে । 
বাই ডিফল্ট লিনাক্সে প্যাকেট ফরওয়ার্ডিং বন্ধ করা থাকে, আমরা সার্ভিসটি চালু করি । 
# In the root namespace
sudo bash -c 'echo 1 > /proc/sys/net/ipv4/ip_forward'
কানেক্টিভিটি চেক করে দেখি,
$ sudo nsenter --net=/var/run/netns/netns0
$ ping 8.8.8.8
# hangs indefinitely long for me...
 
এখনও ঠিকমত কাজ করছে না । 
এটার কারণ হলো কন্টেইনার থেকে হোস্টের বাইরে প্যাকেট পাঠানো হলে সেই ডেস্টিনেশন সার্ভার থেকে কন্টেইনারে প্যাকেট আসতে পারছে না কন্টেইনারের আইপি প্রাইভেট হওয়ার কারণে । এই আইপিতে রাউটিং শুধুমাত্র কন্টেইনারে আছে । হোস্টের বাইরের নেটওয়ার্কের কাছে একইরকম আইপির অনেক রাউটিং থাকতে পারে, মানে রিয়েল নেটওয়ার্কে অনেক কন্টেইনারেই এই আইপি থাকতে পারে । এজন্য আমরা NAT সার্ভিস ইউজ করব । এটা কন্টেইনারের আউটবাউন্ড প্যাকেটের উপরে হোস্টের নেটওয়ার্ক ইন্টারফেসের ইনফরমেশন বসিয়ে দেয়, তাতে বাইরের নেটওয়ার্কে সেটা ট্রান্সলেট হয় হোস্টের ইন্টারফেস হিসেবে, একইভাবে বাইরের নেটওয়ার্ক থেকে কন্টেইনারে ইনবাউন্ড ট্রাফিকের জন্য সে কন্টেইনারের রাউটিং চেক করে কন্টেইনারে ফরওয়ার্ড করবে । 
$ sudo iptables -t nat -A POSTROUTING -s 172.18.0.0/16 ! -o br0 -j MASQUERADE
 
এবার আবার কানেকশন চেক করি
$ sudo nsenter --net=/var/run/netns/netns0
$ ping -c 2 8.8.8.8
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_seq=1 ttl=61 time=43.2 ms
64 bytes from 8.8.8.8: icmp_seq=2 ttl=61 time=36.8 ms
 
--- 8.8.8.8 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 2ms
rtt min/avg/max/mdev = 36.815/40.008/43.202/3.199 ms
 
পোর্ট পাবলিশিং 
ধরি আমাদের কন্টেইনারে মধ্যে একটা server রান করছে । 
$ sudo nsenter --net=/var/run/netns/netns0
$ python3 -m http.server --bind 172.18.0.10 5000
হোস্ট থেকে কন্টেইনারের নেটওয়ার্ক আমরা reach করতে পারছি, কিন্তু যখন বাইরে ইন্টারনেট নেটওয়ার্ক বা রিয়েল ওয়ার্ল্ড সিনারিও তে সমস্যা হবে যে সেখানের কোন সেন্ডার কোন আইপিতে ট্রাফিক ফরোয়ার্ড করবে সেটা বুঝতে পারবে না । বাইরের নেটওয়ার্কে শুধুমাত্র হোস্টের eth0 ইন্টারফেসের আইপি জানে । এজন্য আমাদের কন্টেইনারের সার্ভারের পোর্ট eth0 ইন্টারফেসের মধ্যে পাবলিশ করতে হবে । 

# External traffic
sudo iptables -t nat -A PREROUTING -d 10.0.2.15 -p tcp -m tcp --dport 5000 -j DNAT --to-destination 172.18.0.10:5000

# Local traffic (since it doesn't pass the PREROUTING chain)
sudo iptables -t nat -A OUTPUT -d 10.0.2.15 -p tcp -m tcp --dport 5000 -j DNAT --to-destination 172.18.0.10:5000

ব্রীজ নেটওয়ার্কের ইন্টারফেসে ট্রাফিক ইন্টারসেপ্ট চালু করি । 
sudo modprobe br_netfilter

Testing time!
curl 10.0.2.15:5000
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
# ... omitted lines ...


