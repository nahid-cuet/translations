Hello everyone welcome to the linux, linux server security series in this video we're going to be taking a look at ip tables and how to set up ip tables and the various firewall rules. so again ip tables can be a little bit complicated,if you're unfamiliar with the lexicon that is used or the nomenclature that is used again in regards to tables and chains and that's primarily why we're going to start off by of course understanding exactly how iptables works from a from a very broad
perspective and we'll then move on to the syntax and how to set up the various rules. All right so the first thing we're going to start off with as i said is to understand exactly what iptables is? how it works? its relation with net filter and i'll be using the whiteboard to explain all of this so firstly what is iptables and what is its relation to netfilter because a lot has been made about its comparison or whether or not there is any difference between net filter and ip tables. Well net filter on linux is the firewall framework and iptables is a utility that is used to manage and control net filter. so again iptables is not is not just a firewall or just it is not just responsible for filtering traffic on a system or a network, it also deals with important aspects of networking like nat connections like the ability to modify packets to act as a router so on. Now iptables can be used to filter both incoming and outgoing packets and as i said it can also be used to route packets on a network similar to what a router would do. when we talk about ip tables a very very very clear picture that comes or a term that you will come across a lot is the use of tables. you might be thinking or wondering to yourself why is this this this term or word used why is tables used. And that's very very simple i'll get to that in a second but you can see that even with this image that we have here the the the use of tables and chains is here. when we talk about tables a table within ip tables is a collection of chains that serves a particular function or is responsible for doing or handling a certain aspect of networking.  Now in the context of iptables and within this image you can see that we have three tables here we have the filter table we have the nat table and we have the mangle table and they're all responsible for doing different things. The filter table is responsible for filtering incoming and outgoing traffic this is the table we're going to be looking at and focusing on within this. As you can see filtering is a very simple word to understand this deals with the firewall  aspect. we then have the nat table. the nat table is used to redirect connections to other interfaces on the network. we're not going to be using the nat table because again that really doesn't help us in regards to securing services on our target or on our server .we then have the mangle table the mangle table is interesting but again we're not going to be looking at it .the mangle table deals with modifying and and changing various aspects of a particular packet or a connection. so we're only going to be focusing on the filter table because that is where we actually deal with filtering incoming and outgoing connections. iptables handles complexity by categorizing a unique piece of the functionality of networking in the form of a table so filtering nat connections and the ability to mangle or modify packets. now when we talk about chains. chains are very interesting, chains can be seen as tags that define and match packets to the state, so for example within the filter table we have the input chain, we have the output chain and we have the forward chain and from this we can pretty much understand what each of them is responsible for. each of them is responsible for processing packets based on their type, so for example packets that are being sent into the target will be processed by the input chain, packets that are being sent out of your server will be processed by the output chain and then packets that are being forwarded from one computer to another using your computer or your server will be processed by the forward chain. Now we are only interested in the input and output chain as they deal with ingress and egress traffic so traffic coming in and traffic going out and again just so you understand the table deals with the unique functionality of networking so filtering deals with incoming and outgoing traffic, nat deals with  connecting various devices together and mangled modifying packets then each of them has their own chains based on what they're responsible for. It makes sense that within the filtering table we have the input and output chain and we also have the forward chain. Within the nat table it makes sense that we have the output chain, we have pre-routing the pre-routing chain as well as the post routing chain. so let me just explain what the pre-routing chain does, we're not going to be looking into it but it's very essential that you understand it and it will help you understand what's going on. so the pre-routing chain is used after the packet has entered the network interface so again this is the pre-routing stage so this is  before the packet is sent out of the network interface and this is just when it's been sent into the network interface and then of course post routing is 
before the packet leaves the network interface after the routing decision has been made so pre-routing is
when it just gets into your target and the post routing is after the destination has been decided and just before it leaves your network interface. So that's very simple and again you can see it is also found within the mangle table and the mangle table as i said is used for modifying and mangling packets and connections. if a packet is sent to you and it and the destination is not sent to your ip and you're just forwarding it the forward chain is the one responsible for managing that. Now that you understand how this is all handled we now need to understand the flow of a packet. As it comes into a server and how it's
processed that way, now when when we talk about the chains  within a particular chain we're all obviously going to have what you call rules or firewall rules. Your firewall rules are responsible for managing the input and output of packets. An example of a firewall rule would be i want you to block any incoming ssh connection, so i can say block ssh connection and that's a rule. that's a very simple rule and of course we can also do it for outgoing and forward. Let's focus on incoming, i can also create another firewall rule for incoming connections, i can say block http connections and that is also  going to be found within the input chain so that means that any incoming connection is that comes into the server will be handled by the input chain the way traffic is handled with ip tables is within your input chain you'll have all your rules and the packet will be tested against each of these rules sequentially from the top to the bottom. So firstly if we have a packet coming in and it's requesting an ssh connection it is going to be tested against the block ssh connection rule first and if it matches that a target is going to be set. now when you talk about targets, they  are very simple. it simply refers to what is going to happen to  particular packet once it is matched with a particular rule. targets are very simple, we have accept, we have reject and we have drop. Now accept will simply stop processing and will allow the packet to flow into the service that would it was intended to so if we accept ssh connections  it's it's going to allow the packet to travel into the ssh service and it's going to be processed. if we hit reject reject will drop the packet and it will send feedback to the user and drop will simply just drop the packet and it'll be like no packet was ever even sent to the to the to the server or to your particular computer. so these are the targets. that's how the the the flow of the the packet is handled. Now if the packet comes into the server and it does not match any of the firewall rules it will use the default policies or the default rule that we created. if there is no default rule the packet will simply be accepted by the system so that's something you want to keep into consideration. now of course this might be a bit confusing right now but when we get started with the syntax it'll all be cleared up. so now that we understand the flow of packets we can now get started with the actual syntax we'll take a look at installing it, setting up the service so on and so
we're back in our linux system and what i've done is i've just fired up a quick  or a small little linode here
and it's called ip tables  it's based on ubuntu 20.04 so that's the distribution we're using i've just installed apache 2 on it and you can see it's using the default configuration so the only reason i set up apache on it is just to demonstrate you know how to block  and allow services from being accessed in addition to that the only other services that are running are going to be ssh so we'll be using this particularly node  
for the demonstration a key  point of importance here is  when it comes down to ip tables and the various other firewalls that are installed explicitly on distributions like debian and centos  with debian And debian-based derivatives like ubuntu which is what we're currently using the default firewall that's going to be installed is going to be ufw or the uncomplicated firewall  if you're on centos the default firewall is going to be firewall d. Now it is imperative that you uninstall any of these services because they all utilize ip tables or are all interfaces for ip tables. i will include various ip tables entries or rules that will interfere with what we're doing. so it's always recommended that when you're dealing with ip tables to actually start a fresh or directly from scratch so if you're on centos just ensure that you uninstall firewall d, if you're on ubuntu just make sure you purge  ufw.  so on debian based distributions your ip tables come and with most distributions it'll come pre-packaged so after you've uninstalled any of the the default distribution centric firewalls. you want to make sure you flush the iptables rules by using the iptables F options or -F and make sure to use the sudo command if you're not the root user.  if you don't have iptables installed you just type in apt install iptables and you should have it. you can then enable the service using systemcontrol enable iptables. we can actually get started now to list out the default tables so all the tables we simply type in iptables L option by the way you can access all the documentation using the man pages here. so if we type in iptables L this will give us all the various chains for the particular table that we are using by default with ip tables the table that will be used is going to be the filter table  and not the nat or the the mangle table and you can see directly from here we have the various chains that we saw within the filter table, we have input chain, the forward chain and the output chain.By default we're using the filter table which is great so that will list out any of the rules that we have set here and the target
it'll also list out any additional information like the source and destination so on and so forth.  now you can see a very important  bit of information here, the default policy for all of these chains is set to accept. what does this mean? it means that all connections are set to accept and all of the packets will be set to accept and will all be processed. So this current server is extremely insecure because it's accepting all connections so for example if i try and access the web server i can access it i'm accessing the server via ssh , now when it comes down to configuring ip tables and the default policies, when starting afresh you want to ensure that  all your chains have the default policy set to accept. now you can disable this if you're locking down your server, to do this we simply say iptables –policy INPUT ACCEPT. we can say we can start off with the input chain we then specify whether we want to accept or drop it and in our case we can set accept, the default policy for the input chain .that's going to set the  it's this particular chain the input chain to allow connections. And as i said if you're locking down your server you can just change it to
drop and that will drop any incoming connection so for example i can say iptables –policy INPUT DROP. here and if i try and refresh the web server here it shouldn't allow me to to get access in many cases it should actually just block my ssh connection which it has done and i've have essentially just locked myself out so i'll go back into   linux here and i'll change that back to accept iptables –policy INPUT ACCEPT and now we should be able to get access for ssh so i'll just try and open up a new terminal, we can now try and log in so we should be able to get access . so again if i say iptables l you can see the default policies have been set to accept . we can also do this for the output  the output chain and the the forward chain so we can deny connections that way, if i just go to the web server i can just confirm that i now have access to the web server. that is how to change the default policies, it's recommended that you keep them to accept first and then you reject or you block the connections you don't want to access,  let's get started by first blocking connections or allowing connections from a particular ip address. so for example if i want to block the ip addresses from actually making a connection
to the server we specify the following options so we say iptables, we we can insert this particular rule to
the top remember i said that rules can be appended at the bottom or to the top of the list and they'll be processed that way so if we want to insert one to the very top we use the -I 
if we want to append we use the  -A . in our case we're just going to insert it to the top then we specify the name of the chain so we can say input and if we want to specify the ip  so the source ip we're going to set to we can set it to whatever we want so for example i can set it to 10.0.0.1, i then specify the target which is done by using the -J option and the target is either going to be accept drop or reject  and in our case we can say we want to drop that packet so this will drop any connections to the target from the ip 10.0.0.1. So iptable -I INPUT -s 10.0.0.1 -J DROP. and if we list the options now you can see for the input chain  it's going to drop it and the protocol is all will i'll take a look at specifying the protocol shortly
the source ip is set here and the destination is to anywhere on the target  regardless of the port or the service. We can now take a look at at allowing or blocking connections to a particular port but of course when you're talking about blocking ip addresses we can also allow ip addresses and we can when we talking about networks we can specify an entire subnet iptable -I INPUT -s 10.0.0.0/24 -J DROP.  if we list out the options  iptables -L  the subnet will also be added. When you talk about  deleting particular rules or deleting particular policies what we can do to delete them is we can see list out the options iptables -L –line-numbers and this will number the options for us and we can see we have option number one and option number two here.  we can then say  iptables -L -d  to delete an option and then we specify the name of the chain from which we want to delete the rule from iptables -L -d INPUT 1, that's going to delete and if we now list out the options is deleted. so that is how to allow or block ips.
the target is very important when you talk about allowing or accepting or rejecting connections to particular ports. we can also specify that but we need to specify the protocol that's very important. Let's move over to ports which is where things get very interesting so if i want to block ssh connections or connections to the web server what i can do is i can say iptable -I INPUT we then specify the protocol so the protocol can either be tcp or udp depending on the port being used in our case we know the ssh port is tcp we then specify the destination port which is done by using the two hyphens and d port so the destination port can be port 22.iptable -I INPUT -p tcp –dport 22 for the ssh port,  iptable -I INPUT -p tcp –dport   80 if  we are blocking access to the web server and then we specify the  the target, in

our case it's going to be iptable -I INPUT -p tcp –dport   80 -j DROPso that's going to block any connections to the web server. we try and reload that you can see our access is now blocked there we are so we can't make any  and we can't get access to the web services. so this is great if you're if you're an administrator or a developer and you have a website and you're currently working on the website and you want to block access to the public and you only want to allow access  or you only own you only want
to limit access to ip you can do that really simply using ip tables. So for example if i want to enable a particular ip to access the web server i can simply just say iptable -I INPUT -p tcp –dport   80 -s 197.211.1.6 -j ACCEPT , if i try and reload this right now you can see i now have access but if i try and access it through another   through another ip address it will not allow me or if i'm currently on the if i was any other user on the internet I would not have access so that's how to accept and block  access to a particular port or service and you can also limit it to one ip or to an entire subnet if you want.now when we talk about actually saving the rules because if i say sudo /sbin/iptables-save that's going to save it. that means that this is now persistent. so you have now set the rules  the way you want,  we've taken a look at how to flush rules ,so if you want to get rid of all of these rules we simply say iptables -L -d INPUT 1(Line number of the rules) then i can delete the options based on their number so i then again can save this using sudo /sbin/iptables-save.
so using ip tables is really very simple, the syntax that you want to keep in mind is again very very simple to understand.



